<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com._163.king13zhi.p2p.business.mapper.RechargeOfflineMapper">
	<resultMap id="BaseResultMap" type="com._163.king13zhi.p2p.business.domain.RechargeOffline">
		<id column="id" property="id"/>
		<result column="state" property="state"/>
		<result column="remark" property="remark"/>
		<result column="auditTime" property="auditTime"/>
		<result column="applyTime" property="applyTime"/>
		<result column="tradeCode" property="tradeCode"/>
		<result column="tradeTime" property="tradeTime"/>
		<result column="amount" property="amount"/>
		<result column="note" property="note"/>

		<association property="applier" javaType="com._163.king13zhi.p2p.base.domain.Logininfo" columnPrefix="ap_">
			<id column="id" property="id"/>
			<result column="username" property="username"/>
		</association>

		<association property="auditor" javaType="com._163.king13zhi.p2p.base.domain.Logininfo" columnPrefix="au_">
			<id column="id" property="id"/>
			<result column="username" property="username"/>
		</association>

		<association property="bankInfo" javaType="com._163.king13zhi.p2p.business.domain.PlatformBankinfo"
					 columnPrefix="bank_">
			<id column="id" property="id"/>
			<result column="bankName" property="bankName"/>
			<result column="accountNumber" property="accountNumber"/>
			<result column="bankForkname" property="bankForkname"/>
			<result column="accountName" property="accountName"/>
		</association>
	</resultMap>
	<insert id="insert" useGeneratedKeys="true"
			keyProperty="id">
		insert into `rechargeoffline` (state, remark, auditTime, applyTime, auditor_id, applier_id,
		tradeCode, tradeTime, amount, note, bankinfo_id)
		values (#{state}, #{remark}, #{auditTime}, #{applyTime}, #{auditor.id}, #{applier.id},
		#{tradeCode}, #{tradeTime}, #{amount}, #{note}, #{bankInfo.id})
	</insert>
	<update id="updateByPrimaryKey">
		update `rechargeoffline`
		set state = #{state},
		remark = #{remark},
		auditTime = #{auditTime},
		applyTime = #{applyTime},
		auditor_id = #{auditor.id},
		applier_id = #{applier.id},
		tradeCode = #{tradeCode},
		tradeTime = #{tradeTime},
		amount = #{amount},
		note = #{note}
		<if test="bankInfo.id != null">
			,bankinfo_id = #{bankInfo.id}
		</if>
		where id = #{id}
	</update>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap">
		select ro.id, ro.state, ro.remark, ro.auditTime, ro.applyTime, ro.auditor_id, ro.applier_id, ro.tradeCode,
		ro.tradeTime, ro.amount, ro.note, ro.bankinfo_id,
		ap.id ap_id ,ap.username ap_username,
		au.id au_id ,au.username au_username,
		bank.id band_id ,bank.bankName bank_bankName,
		bank.accountNumber bank_accountNumber ,bank.bankForkname bank_bankForkname ,
		bank.accountName bank_accountName
		from `rechargeoffline` ro join logininfo ap on (ro.applier_id = ap.id)
		left join logininfo au on(ro.auditor_id = au.id)
		left join platformbankinfo bank on bank.id = ro.bankinfo_id
		where ro.id = #{id}
	</select>

	<sql id="codition_sql">
		<where></where>
	</sql>

	<select id="pagePage" resultMap="BaseResultMap">
		select ro.id, ro.state, ro.remark, ro.auditTime, ro.applyTime, ro.auditor_id, ro.applier_id, ro.tradeCode,
		ro.tradeTime, ro.amount, ro.note, ro.bankinfo_id,
		ap.id ap_id ,ap.username ap_username,
		au.id au_id ,au.username au_username,
		bank.id band_id ,bank.bankName bank_bankName,
		bank.accountNumber bank_accountNumber ,bank.bankForkname bank_bankForkname ,
		bank.accountName bank_accountName
		from `rechargeoffline` ro join logininfo ap on (ro.applier_id = ap.id)
		left join logininfo au on(ro.auditor_id = au.id)
		left join platformbankinfo bank on bank.id = ro.bankinfo_id
		<include refid="codition_sql"/>
	</select>
</mapper>